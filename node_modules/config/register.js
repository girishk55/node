var crypto = require('crypto');
var rand = require('csprng');
var mongoose = require('mongoose');
var user = require('config/models');



exports.register = function(name,email,password,callback) {

var x = email;
if(!(x.indexOf("@")<1 || x.lastIndexOf(".")<x.indexOf("@")+2 || x.lastIndexOf(".")+2>=x.length)){
if (password.match(/([a-z].*[A-Z])|([A-Z].*[a-z])/) && password.length > 4 && password.match(/[0-9]/) && password.match(/.[!,@,#,$,%,^,&,*,?,_,~]/)) {

var temp =rand(160, 36);
var newpass = temp + password;
var token = crypto.createHash('sha512').update(email +rand).digest("hex");
var hashed_password = crypto.createHash('sha512').update(newpass).digest("hex");

console.log('name : '+ name);
console.log('token : '+ token);
console.log('email : '+ email);
console.log('hashed_password : '+ hashed_password);
console.log('temp : '+ temp);

var newuser = new user({ 
	name: name,
	token: token,
	email: email, 
	hashed_password: hashed_password,
	salt :temp });

user.find({email: email},function(err,users){
console.log('err : '+ err);
var len = users.length;
console.log('len : '+ len);

if(len == 0){
	console.log('newuser : '+ newuser);
 	newuser.save(function (err) {
	console.log('err : '+ err);
	callback({'response':"Sucessfully Registered"});
		
});
}else{

	callback({'response':"Email already Registered"});

}});}else{

	callback({'response':"Password Weak"});
	
}}else{

	callback({'response':"Email Not Valid"});
	
}
}

